@page "/categorias/editar/{Id:int}"
@inject NavigationManager navigationManager
@inject IRepositorio repositorio
@inject SweetAlertService sweetAlertService

<h3>Editar Categoria</h3>

@if (categoria is null)
{
    <p>Cargando...</p>
}
else
{
    <CategoriaForm @ref="categoriaForm" Categoria="categoria" OnValidSubmit="Editar" ReturnAction="Return" />
}

@code {
    private Categoria? categoria;
    private CategoriaForm? categoriaForm;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var responseHttp = await repositorio.Get<Categoria>($"api/categorias/{Id}");

        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("categorias");
            }
            else
            {
                var messageError = await responseHttp.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", messageError, SweetAlertIcon.Error);
            }
        }
        else
        {
            categoria = responseHttp.Response;
        }
    }

    private async Task Editar()
    {
        var responseHttp = await repositorio.Put("api/categorias", categoria);

        if (responseHttp.Error)
        {
            var messageError = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", messageError, SweetAlertIcon.Error);
        }
        else
        {
            categoriaForm!.FormPostedSuccessfully = true;
            navigationManager.NavigateTo("categorias");
        }
    }

    private void Return()
    {
        navigationManager.NavigateTo("categorias");
    }
}
